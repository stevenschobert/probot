// All of the classes here give you a bare-bones grid system.
// Although you probably won't need to change much when it comes
// to the grid, you can override most of the pieces if you want.
//
// Grids are a unique exception where we provide mixins in addition
// to placeholder classes. This is because grid classes will need
// to be extended inside media queries often, whereas most everything
// else should be extended outside of media queries, and just
// overridden a few properties inside the media query.
@include bake-extend(
  'grid',
  'column',
  'col-1-2',
  'col-1-4',
  'col-3-4',
  'col-1-3',
  'col-2-3',
  'col-1-8'
);

// These variables are used internally just to keep things a
// little easier to update. They are not meant to be exposed
// for the user to change. Customization should happen through
// the extending system.
$grid-gutter-size: 1.5em;

// Every grid should just be wrapped in a .grid class.
// (we also provide the grid() as a mixin for use in media queries)
@mixin grid {
  width: auto;
  @include box-sizing(border-box);

  // This is used to clear the floated columns inside the grid.
  &:after {
    clear: both;
    content: '';
    display: table;
    @include box-sizing(border-box);
  }
}

%grid {
  // the placeholder class here is really just for convenience
  // when prototyping views. In most production cases, the grid
  // mixin will be included in media queries, instead of extended
  @include grid();

  // All columns begins with "col-", so we use a shorthand method
  // here to apply some general rules to all the columns.
  [class*='col-'] {
    @extend %column;
  }
}

// Here are the simple colum classes. We have 1/2, 1/4, and 1/8.
// You can also combine them for easy gridding (1/2 | 1/4 | 1/4)
// (we also provide a mixin for use in media queries)
@mixin column {
  float: left;
  padding-right: $grid-gutter-size;
  @include box-sizing(border-box);

  // The last colum in a grid will not have a gutter.
  &:last-of-type {
    padding-right: 0;
  }
}

%column {
  @include column();
}

// Since we already need a mixin for the column sizes, we go ahead
// and have that mixin define the column sizes. The placeholder classes
// really are just a convenience for quick prototyping.
@mixin col($size) {
  @if $size == '1-2' {
    width: 50%;
  } @else if $size == '1-4' {
    width: 25%;
  } @else if $size == '3-4' {
    width: 75%;
  } @else if $size == '1-3' {
    width: 33.33%;
  } @else if $size == '2-3' {
    width: 66.66%;
  } @else if $size == '1-8' {
    width: 12.5%;
  }
}

%col-1-2 {
  @include col('1-2');
}

%col-1-4 {
  @include col('1-4');
}

%col-3-4 {
  @include col('3-4');
}

%col-1-3 {
  @include col('1-3');
}

%col-2-3 {
  @include col('2-3');
}

%col-1-8 {
  @include col('1-8');
}
